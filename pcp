#!/usr/bin/python3
# copies one or more sources to a target
# pcp <source>* <target>
#

import sys
import os
import tempfile
import shutil
import subprocess

debug=True

#----------------------------------------
# utility functions

def perror(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)

def run( command ):
  if debug: print(command)
  status = subprocess.run(
    command
    ,stderr=subprocess.PIPE
    ,universal_newlines=True
  );
  if status.returncode != 0:
    if status.stderr:
      perror(command.append(status.stderr))
    else:
      perror(command.append("failed"))
  return status.returncode

# def run( command ):
#   if debug:
#     print(command)
#     return_value = os.system(command)
#   if return_value != 0:
#     perror("command failed: "+command)

def pcp_exit( code, gather_dir ):
  if not debug and gather_dir: shutil.rmtree(gather_dir)
  sys.exit(code)


#----------------------------------------
# options - punt

keep_source = 'never'
keep_target = 'never'
no_delete = False;
incremental_delete = not no_delete and False;
do_gather = True;
do_copy_to_target = True;

gather_dir = tempfile.mkdtemp()
tar_file_path = os.path.join(gather_dir, "source.tar");

#----------------------------------------
# argument desctructuring and characterization

if debug: print(sys.argv)

if len(sys.argv) == 1:
  print("pcp <source>* <target>")
  print("  Sources may be files or directories. The target must be a directory, existing or to be created.")
  sys.exit(1)

if len(sys.argv) < 3:
  print("need at least one source argument and one dst_path argument")
  pcp_exit(1, gather_dir)

sources = sys.argv[1:-1]
target = sys.argv[-1] 

target_exists = os.path.exists(target)
target_is_dir = os.path.isdir(target)



#----------------------------------------
# argument guard tests

err_cnt = 0;

valid_sources = []
for src in sources:
  if not os.path.exists(src):
    perror("source does not exist, skipping: "+src)
  else:
    valid_sources.append(src)

if len(valid_sources) == 0:
  perror("No valid sources found.")
  err_cnt += 1

if target_exists and not target_is_dir:
  perror("target exists, but it is not a directory: "+target)
  err_cnt += 1

if not os.path.exists(target):
  rv = run(["mkdir", "-p", target])
  if rv:
    perror("could not make target directory")
    err_cnt += 1

if err_cnt > 0: pcp_exit(1, gather_dir)
sources = valid_sources

#----------------------------------------
def gather(sources, tar_file_path):
  if not os.path.exists(tar_file_path):
    run(["tar", "cf", tar_file_path, "-T", "/dev/null"])
  for src in sources:
    parent_path, child_name = os.path.split(src)
    if not parent_path: parent_path = "."
    run(["tar", "-C", parent_path, "-r", "-f",  tar_file_path, child_name])
    
#----------------------------------------
def copy_to_target(tar_file_path, target):
  run(["tar", "--no-overwrite-dir", "--dereference", "-C", target, "-x", "-f",  tar_file_path])

gather(sources, tar_file_path)
copy_to_target(tar_file_path, target)
pcp_exit(0, gather_dir)
